df_MEs = cbind(df_MEs_dx, df_MEs_Age)
##### Reshape and plot #####
rm(list = setdiff(ls(), c("df_MEs", "df_PGC", "df_TWAS", "df_Pathologies", "df_Cell_spec", "df_DEGs", "df_GO", "Region")))
df_enrich = cbind(df_PGC, df_TWAS, df_DEGs)
require(reshape2)
df_enrich = melt(df_enrich, id.vars = "Net_type")
df_Cell_spec_reshape = melt(df_Cell_spec, id.vars = "Net_type")
df_Cell_spec_reshape$Net_type = factor(df_Cell_spec_reshape$Net_type,levels = levels(df_enrich$Net_type))
df_MEs_reshape = melt(df_MEs, id.vars = "Net_type")
df_MEs_reshape$Net_type = factor(df_MEs_reshape$Net_type,levels = levels(df_enrich$Net_type))
pdf(paste0(file = "C://Users/drega/Desktop/MultipleNet/Boxplot_enrich_multipleNetworks_", Region, ".pdf"), width = 24, height = 12)
require(ggplot2)
qplot(x = Net_type, y = value, data = df_enrich, geom = "boxplot") + aes(color = df_enrich$Net_type) + facet_grid(.~df_enrich$variable) +ylim(c(0, 9)) + labs(color = "") + ylab("-log10(pval)") + theme( axis.title.y = element_text(size = 20), axis.title.x = element_text(size = 15), axis.text = element_text(size = 15), strip.text.x = element_text(size = 10)) + scale_x_discrete(labels = c("RUV", "SVA", "qSVA"))####### x = variabile di split dei dati, ###y = valore da plottare, #### facet.grid in base a tipo di variabile (PGC, TWAS)
qplot(x = Net_type, y = value, data = df_Cell_spec_reshape, geom = "boxplot") + aes(color = df_Cell_spec_reshape$Net_type) + facet_grid(.~df_Cell_spec_reshape$variable) +ylim(c(0, 250)) + labs(color = "") + ylab("-log10(pval)")+ theme( axis.title.y = element_text(size = 20), axis.title.x = element_text(size = 15), axis.text = element_text(size = 15), strip.text.x = element_text(size = 10))  ####### x = variabile di split dei dati, ###y = valore da plottare, #### facet.grid in base a tipo di variabile (PGC, TWAS)
qplot(x = Net_type, y = value, data = df_MEs_reshape, geom = "boxplot") + aes(color = df_MEs_reshape$Net_type) + facet_grid(.~df_MEs_reshape$variable) +ylim(c(0, 20)) + labs(color = "") + ylab("-log10(pval)") + theme( axis.title.y = element_text(size = 20), axis.title.x = element_text(size = 15), axis.text = element_text(size = 15), strip.text.x = element_text(size = 10)) ####### x = variabile di split dei dati, ###y = valore da plottare, #### facet.grid in base a tipo di variabile (PGC, TWAS)
dev.off()
########## PGC ##########
Region = "Caudate"
source("C://Users/drega/Desktop/WGCNA/WGCNA/Code 4 boxplot/PGC_func.R")
EnrichTar = "PGC"
Networks = c("RUV", "SVA", "qSVA")
# NetDir <- function(Network, EnrichType) {paste0("C://Users/agaudio1/Desktop/MultipleNet/")}
NetDirectory = "C://Users/drega/Desktop/MultipleNet/"
df_PGC <- PGC_enrich(Networks, EnrichType = EnrichTar, NetDirectory = NetDirectory, Region)
######## TWAS ########
source("C://Users/drega/Desktop/WGCNA/WGCNA/Code 4 boxplot/TWAS_func.R")
EnrichTar = c("TWAS.Gusev2018", "TWAS.SCZ.Gandal")
df_TWAS = TWAS_enrich(Networks, EnrichType = EnrichTar,
NetDirectory = NetDirectory, Region)
##### DEGS ######
EnrichTar = c("DEGs_Jaffe", "DEGs_Fromer")
source("C://Users/drega/Desktop/WGCNA/WGCNA/Code 4 boxplot/DEGs_func.R")
df_DEGs = DEGs_enrich(Networks, EnrichType = EnrichTar,
NetDirectory = NetDirectory, Region)
##### Cell Specificity #####
EnrichTar = "Cell Specificity"
#Networks = c("RUV", "SVA_noMOD", "qSVA_noMOD", "SVA", "qSVA")
for(n in Networks){
load(paste0(NetDirectory, Region, "/", n, "/", "WGCNA.LIBD_", Region, "_", n, ".RData"))
mod = sort(as.vector(unique(IMk_module$moduleColors)))
mod = mod[!mod == "grey"]
source("C://Users/drega/Desktop/WGCNA/WGCNA/Code 4 boxplot/Cell_spec_gen_func.R")
a = Cell_spec(Networks = n, mod, dataset = c("AIBS", "DRONC_human", "DRONC_human-sub"),    ####target directory has folders with names of networks
NetDirectory, EnrichType = EnrichTar, Region)
assign(paste0("df_", n), a)
}
df_Cell_spec <- rbind(get(paste0("df_", Networks[1])),
get(paste0("df_", Networks[2])),
get(paste0("df_", Networks[3])))
df_MEs_dx = data.frame()
for(n in Networks){
load(paste0(NetDirectory, Region, "/", n, "/", "WGCNA.LIBD_", Region, "_", n, ".RData"))
source("C://Users/drega/Desktop/WGCNA/WGCNA/MEs/qSVA/t.test.MEs_func.R")
pval = as.data.frame(t.test.ME(demo, eigenval))
pval$Net_type = rep(n, nrow(pval))
index = rownames(pval) %in% "grey"
pval = pval[!index,]
colnames(pval)[1] = "t.test Pz/Ctrl"
assign(paste0("pval_", n), pval)
}
df_MEs_dx = rbind(get(paste0("pval_", Networks[1])), get(paste0("pval_", Networks[2])), get(paste0("pval_", Networks[3])))
##### cor.test MEs vs Age
df_MEs_Age = data.frame()
for(n in Networks){
load(paste0(NetDirectory, Region, "/", n, "/", "WGCNA.LIBD_", Region, "_", n, ".RData"))
source("C://Users/drega/Desktop/WGCNA/WGCNA/MEs/cor.test.MEs_vs_Age_func_4boxplot.R")
pval = as.data.frame(cor.test.MesvsAge(demo, eigenval))
pval$Net_type = rep(n, nrow(pval))
colnames(pval)[1] = "cor.test MEs vs Age"
assign(paste0("pval_", n), pval)
}
df_MEs_Age = rbind(get(paste0("pval_", Networks[1])), get(paste0("pval_", Networks[2])), get(paste0("pval_", Networks[3])))
df_MEs = cbind(df_MEs_dx, df_MEs_Age)
##### Reshape and plot #####
rm(list = setdiff(ls(), c("df_MEs", "df_PGC", "df_TWAS", "df_Pathologies", "df_Cell_spec", "df_DEGs", "df_GO", "Region")))
df_enrich = cbind(df_PGC, df_TWAS, df_DEGs)
require(reshape2)
df_enrich = melt(df_enrich, id.vars = "Net_type")
df_Cell_spec_reshape = melt(df_Cell_spec, id.vars = "Net_type")
df_Cell_spec_reshape$Net_type = factor(df_Cell_spec_reshape$Net_type,levels = levels(df_enrich$Net_type))
df_MEs_reshape = melt(df_MEs, id.vars = "Net_type")
df_MEs_reshape$Net_type = factor(df_MEs_reshape$Net_type,levels = levels(df_enrich$Net_type))
pdf(paste0(file = "C://Users/drega/Desktop/MultipleNet/Boxplot_enrich_multipleNetworks_", Region, ".pdf"), width = 24, height = 12)
require(ggplot2)
qplot(x = Net_type, y = value, data = df_enrich, geom = "boxplot") + aes(color = df_enrich$Net_type) + facet_grid(.~df_enrich$variable) +ylim(c(0, 9)) + labs(color = "") + ylab("-log10(pval)") + theme( axis.title.y = element_text(size = 20), axis.title.x = element_text(size = 15), axis.text = element_text(size = 15), strip.text.x = element_text(size = 10)) + scale_x_discrete(labels = c("RUV", "SVA", "qSVA"))####### x = variabile di split dei dati, ###y = valore da plottare, #### facet.grid in base a tipo di variabile (PGC, TWAS)
qplot(x = Net_type, y = value, data = df_Cell_spec_reshape, geom = "boxplot") + aes(color = df_Cell_spec_reshape$Net_type) + facet_grid(.~df_Cell_spec_reshape$variable) +ylim(c(0, 250)) + labs(color = "") + ylab("-log10(pval)")+ theme( axis.title.y = element_text(size = 20), axis.title.x = element_text(size = 15), axis.text = element_text(size = 15), strip.text.x = element_text(size = 10))  ####### x = variabile di split dei dati, ###y = valore da plottare, #### facet.grid in base a tipo di variabile (PGC, TWAS)
qplot(x = Net_type, y = value, data = df_MEs_reshape, geom = "boxplot") + aes(color = df_MEs_reshape$Net_type) + facet_grid(.~df_MEs_reshape$variable) +ylim(c(0, 20)) + labs(color = "") + ylab("-log10(pval)") + theme( axis.title.y = element_text(size = 20), axis.title.x = element_text(size = 15), axis.text = element_text(size = 15), strip.text.x = element_text(size = 10)) ####### x = variabile di split dei dati, ###y = valore da plottare, #### facet.grid in base a tipo di variabile (PGC, TWAS)
dev.off()
########## PGC ##########
Region = "Caudate"
source("C://Users/drega/Desktop/WGCNA/WGCNA/Code 4 boxplot/PGC_func.R")
Networks = c("qSVA_1stRange", "qSVA_2ndRange", "qSVA_3rdRange", "qSVA_4thRange")
# NetDir <- function(Network, EnrichType) {paste0("C://Users/agaudio1/Desktop/MultipleNet/")}
NetDirectory = "C://Users/drega/Desktop/MultipleNet/"
##### Cell Specificity #####
EnrichTar = "Cell Specificity"
load(paste0(NetDirectory, Region, "/", "WGCNA_LIBD_", Region, "_", n, ".RData"))
#Networks = c("RUV", "SVA_noMOD", "qSVA_noMOD", "SVA", "qSVA")
for(n in Networks){
load(paste0(NetDirectory, Region, "/", "WGCNA_LIBD_", Region, "_", n, ".RData"))
mod = sort(as.vector(unique(IMk_module$moduleColors)))
mod = mod[!mod == "grey"]
source("C://Users/drega/Desktop/WGCNA/WGCNA/Code 4 boxplot/Cell_spec_gen_func.R")
a = Cell_spec(Networks = n, mod, dataset = c("AIBS", "DRONC_human", "DRONC_human-sub"),    ####target directory has folders with names of networks
NetDirectory, EnrichType = EnrichTar, Region)
assign(paste0("df_", n), a)
}
load(paste0(NetDirectory, Region, "/", "WGCNA_LIBD_", Region, "_", n, ".RData"))
source("C://Users/drega/Desktop/WGCNA/WGCNA/Code 4 boxplot/Cell_spec_gen_func.R")
View(Cell_spec)
########## PGC ##########
Region = "Caudate"
source("C://Users/drega/Desktop/WGCNA/WGCNA/Code 4 boxplot/PGC_func.R")
EnrichTar = "PGC"
Networks = c("qSVA_1stRange", "qSVA_2ndRange", "qSVA_3rdRange", "qSVA_4thRange")
# NetDir <- function(Network, EnrichType) {paste0("C://Users/agaudio1/Desktop/MultipleNet/")}
NetDirectory = "C://Users/drega/Desktop/MultipleNet/"
##### Cell Specificity #####
EnrichTar = "Cell Specificity"
#Networks = c("RUV", "SVA_noMOD", "qSVA_noMOD", "SVA", "qSVA")
for(n in Networks){
load(paste0(NetDirectory, Region, "/", n, "/", "WGCNA_LIBD_", Region, "_", n, ".RData"))
mod = sort(as.vector(unique(IMk_module$moduleColors)))
mod = mod[!mod == "grey"]
source("C://Users/drega/Desktop/WGCNA/WGCNA/Code 4 boxplot/Cell_spec_gen_func.R")
a = Cell_spec(Networks = n, mod, dataset = c("AIBS", "DRONC_human", "DRONC_human-sub"),    ####target directory has folders with names of networks
NetDirectory, EnrichType = EnrichTar, Region)
assign(paste0("df_", n), a)
}
#Networks = c("RUV", "SVA_noMOD", "qSVA_noMOD", "SVA", "qSVA")
for(n in Networks){
load(paste0(NetDirectory, Region, "/", n, "/", "WGCNA_LIBD_", Region, "_", n, ".RData"))
mod = sort(as.vector(unique(IMk_module$moduleColors)))
mod = mod[!mod == "grey"]
source("C://Users/drega/Desktop/WGCNA/WGCNA/Code 4 boxplot/Cell_spec_gen_func.R")
a = Cell_spec(Networks = n, mod, dataset = c("AIBS", "DRONC_human", "DRONC_human-sub"),    ####target directory has folders with names of networks
NetDirectory, EnrichType = EnrichTar, Region)
assign(paste0("df_", n), a)
}
source("C://Users/drega/Desktop/WGCNA/WGCNA/Code 4 boxplot/Cell_spec_gen_func.R")
View(Cell_spec)
load(paste0(NetDirectory, Region, "/", n, "/", "WGCNA_LIBD_", Region, "_", n, ".RData"))
mod = sort(as.vector(unique(IMk_module$moduleColors)))
mod = mod[!mod == "grey"]
x1 = data.frame(matrix("", nrow = length(mod)))
dataset = c("AIBS", "DRONC_human", "DRONC_human-sub")
for(d in dataset){
load(paste0(NetDirectory, Region, "/", Networks, "/", EnrichType, "_RData/", "enrich_GSEA_LIBD_", Region, "_", Networks, "_", d, ".RData"))
x = as.data.frame(results.log10)
x = as.data.frame(apply(x, 1, max))
colnames(x) = d
x1 = cbind(x1, x)
#rm(list = setdiff(ls(), c("y", names(formals(Cell_spec)))))
}
EnrichType = EnrichTar
for(d in dataset){
load(paste0(NetDirectory, Region, "/", Networks, "/", EnrichType, "_RData/", "enrich_GSEA_LIBD_", Region, "_", Networks, "_", d, ".RData"))
x = as.data.frame(results.log10)
x = as.data.frame(apply(x, 1, max))
colnames(x) = d
x1 = cbind(x1, x)
#rm(list = setdiff(ls(), c("y", names(formals(Cell_spec)))))
}
load(paste0(NetDirectory, Region, "/", Networks, "/", EnrichType, "_RData/", "enrich_GSEA_LIBD_", Region, "_", Networks, "_", d, ".RData"))
paste0(NetDirectory, Region, "/", Networks, "/", EnrichType, "_RData/", "enrich_GSEA_LIBD_", Region, "_", Networks, "_", d, ".RData")
load(paste0(NetDirectory, Region, "/", n, "/", EnrichType, "_RData/", "enrich_GSEA_LIBD_", Region, "_", n, "_", d, ".RData"))
x = as.data.frame(results.log10)
x = as.data.frame(apply(x, 1, max))
colnames(x) = d
x1 = cbind(x1, x)
View(results.log10)
##### Cell Specificity #####
EnrichTar = "Cell Specificity"
#Networks = c("RUV", "SVA_noMOD", "qSVA_noMOD", "SVA", "qSVA")
for(n in Networks){
load(paste0(NetDirectory, Region, "/", n, "/", EnrichTar, "_RData/", "enrich_GSEA_LIBD_", Region, "_", n, "_AIBS", ".RData"))
mod = sort(as.vector(unique(rownames(results.log10))))
mod = mod[!mod == "grey"]
source("C://Users/drega/Desktop/WGCNA/WGCNA/Code 4 boxplot/Cell_spec_gen_func.R")
a = Cell_spec(Networks = n, mod, dataset = c("AIBS", "DRONC_human", "DRONC_human-sub"),    ####target directory has folders with names of networks
NetDirectory, EnrichType = EnrichTar, Region)
assign(paste0("df_", n), a)
}
########## PGC ##########
Region = "DLPFC"
##### Cell Specificity #####
EnrichTar = "Cell Specificity"
#Networks = c("RUV", "SVA_noMOD", "qSVA_noMOD", "SVA", "qSVA")
for(n in Networks){
load(paste0(NetDirectory, Region, "/", n, "/", EnrichTar, "_RData/", "enrich_GSEA_LIBD_", Region, "_", n, "_AIBS", ".RData"))
mod = sort(as.vector(unique(rownames(results.log10))))
mod = mod[!mod == "grey"]
source("C://Users/drega/Desktop/WGCNA/WGCNA/Code 4 boxplot/Cell_spec_gen_func.R")
a = Cell_spec(Networks = n, mod, dataset = c("AIBS", "DRONC_human", "DRONC_human-sub"),    ####target directory has folders with names of networks
NetDirectory, EnrichType = EnrichTar, Region)
assign(paste0("df_", n), a)
}
paste0(NetDirectory, Region, "/", n, "/", EnrichTar, "_RData/", "enrich_GSEA_LIBD_", Region, "_", n, "_AIBS", ".RData")
##### Cell Specificity #####
EnrichTar = "Cell Specificity"
#Networks = c("RUV", "SVA_noMOD", "qSVA_noMOD", "SVA", "qSVA")
for(n in Networks){
load(paste0(NetDirectory, Region, "/", n, "/", EnrichTar, "_RData/", "enrich_GSEA_LIBD_", Region, "_", n, "_AIBS", ".RData"))
mod = sort(as.vector(unique(rownames(results.log10))))
mod = mod[!mod == "grey"]
source("C://Users/drega/Desktop/WGCNA/WGCNA/Code 4 boxplot/Cell_spec_gen_func.R")
a = Cell_spec(Networks = n, mod, dataset = c("AIBS", "DRONC_human", "DRONC_human-sub"),    ####target directory has folders with names of networks
NetDirectory, EnrichType = EnrichTar, Region)
assign(paste0("df_", n), a)
}
require(devtools)
install_version("AppliedPredictiveModelling", version = 1.1.6)
install_version("AppliedPredictiveModelling", version = "1.1.6")
install.packages("AppliedPredictiveModelling")
library(AppliedPredictiveModelling)
library("AppliedPredictiveModelling")
require(devtools)
install_version("AppliedPredictiveModelling", version = "1.1.6", repos = https://CRAN.R-project.org/package=AppliedPredictiveModeling)
install_version("AppliedPredictiveModelling", version = "1.1.6", repos = "https://CRAN.R-project.org/package=AppliedPredictiveModeling")
install_version("AppliedPredictiveModelling", version = "1.1.7", repos = "https://CRAN.R-project.org/package=AppliedPredictiveModeling")
install_version("AppliedPredictiveModelling", version = "1.1.7", repos = "https://CRAN.R-project.org/")
BiocManager::install("AppliedPredictiveModelling")
library(remotes)
library(installr)
require(installr)
install.packages("installr")
library(installr)
updateR()
install.packages("AppliedPredictiveModelling")
library(remotes)
install.packages("remotes")
library(remotes)
install_version("AppliedPredictiveModelling", version = "1.1.6")
install_version("AppliedPredictiveModelling", version = "v1.1.6")
install.packages("biocManager")
install.packages("BiocManager")
BiocManager::install("AppliedPredictiveModelling")
install.packages("AppliedPredictiveModelling", repos='http://cran.rstudio.com/')
install.packages("AppliedPredictiveModelling", repos='http://cran.us.r-project.org/')
setRepositories()
available.packages()
ap = available.packages()
xx = "AppliedPredictiveModelling"
ap[xx,]
rownames(ap) == xx
sum(rownames(ap) == xx)
setRepositories()
install.packages(xx)
xx
install.packages("AppliedPredictiveModelling")
setRepositories()
install.packages("AppliedPredictiveModelling")
install.packages("AppliedPredictiveModelling")
install.packages("AppliedPredictiveModelling")
install.packages('AppliedPredictiveModelling', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages("C:\\Users/drega/Desktop/AppliedPredictiveModeling/", type = "source", repos = NULL)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
install.packages("caret")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
install.packages("rpart")
library(rpart)
library(ElemStatLearn)
library(pgmm)
library(caret)
library(ggplot2)
install.packages("vctrs")
library(caret)
library(ggplot2)
install.packages("vctrs")
library(ggplot2)
install.packages("vctrs")
library(ggplot2)
library(caret)
install.packages("recipes")
library(caret)
library(AppliedPredictiveModeling)
rm(ls())
rm(ap)
rm(xx)
data("segmentationOriginal")
head(segmentationOriginal, 3)
View(segmentationOriginal)
table(segmentationOriginal$Case)
training = segmentationOriginal[which(segmentationOriginal$Case %in% "Train"),]
test = segmentationOriginal[which(segmentationOriginal$Case %in% "Test"),]
set.seed(125)
rpart(~.)
rpart(~., data = training)
model_rpart = train(Case ~., data = training, method = "rpart")
model_rpart = train(Case ~., data = segmentationOriginal, method = "rpart")
model_rpart = train(Class ~., data = training, method = "rpart")
install.packages("e1071")
library(e1071)
model_rpart = train(Class ~., data = training, method = "rpart")
str(model_rpart)
View(model_rpart)
model_rpart$finalModel
install.packages("rattle")
library(rattle)
fancyRpartPlot(model_rpart$finalModel)
dev.off()
data("olive")
olive = olive[,-1]
View(olive)
oil = train(Area ~., data = olive, method = "rpart")
newdata = as.data.frame(t(colMeans(olive)))
new = predict(oil, newdata = newdata)
data("SAheart")
set.seed(8484)
train = sample(1:dim(SAheart)[1], size = dim(SAheart)[1]/2, replace = F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(SAheart)
mod = train(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method = "glm", family = "binomial")
missClass = function(values, prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(mod, newdata = testSA))
missClass(trainSA$chd, predict(mod, newdata = trainSA))
data("vowel.train)
""
"
data("vowel.train")
data("vowel.test")
head8vowel.test, 3
head(vowel.test, 3)
class(vowel.test$y = factor)
vowel.test$y <- factor)
vowel.test$y <- factor
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
?train
names(getModelInfo())
mod = train(y~., data = vowel.train, method = "rf")
mod = train(y~., data = vowel.train, method = "rf")
varImp(mod)
install.packages("gbm")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("forecast")
rm(mod)
class(vowel.test$y)
set.seed(33833)
mod1 = train(y~., data = vowel.train, methiod = "rf")
library(caret)
mod1 = train(y~., data = vowel.train, methiod = "rf")
mod2 = train(y~., data = vowel.train, method = "gbm")
pred
pred_rf = predict(mod1, vowel.train)
pred_gbm = predict(mod2, vowel.train)
predDF = data.frame(pred_rf, pred_gbm, y = vowel.test$y)
confusionMatrix(pred_rf, vowel.test$y)
pred_rf = predict(mod1, vowel.test)
pred_gbm = predict(mod2, vowel.test)
confusionMatrix(pred_rf, vowel.test$y)
confusionMatrix(pred_rf, vowel.test$y)$overall[1]
confusionMatrix(pred_gbm, vowel.test$y)$overall[1]
pred_DF = data.frame(pred_rf, pred_gbm, y = vowel.test$y)
View(pred_DF)
agree_index = pred_rf    == pred_gbm
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(32433)
install.packages("shiny")
library(shiny)
runApp('C:/Users/drega/Desktop/myApp')
install.packages("leaflet")
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
library(leaflet)
latit = c(39.0000, 43.3615, 45.2838)
long = c(-9.759, 1.2637, 09.1053)
df = data.frame(lat = latit, lng = long, cities = c("Lisbon", "Toulouse", "Milan"))
View(df)
df >%> leaflet() >%> addTiles() >%> addMarkers(popup = cities)
df %>% leaflet() %>% addTiles() %>% addMarkers(popup = cities)
cities = c("Lisbon", "Toulouse", "Milan")
df = data.frame(lat = latit, lng = long, cit = cities)
df %>% leaflet() %>% addTiles() %>% addMarkers(popup = cit)
df %>% leaflet() %>% addTiles() %>% addMarkers(popup = cities)
install.packages("DDPQuiz3")
install.packages("C://Users/drega/Downloads/DDPQuiz3_1.0.zip")
install.packages("plotly")
library(plotly)
?plot_ly
var1 = runif(n = 20, min = 2, max = 50)
var2 = runif(n = 20, min = 5, max =100)
var3 = runif(n = 20, min = 20, max = 1000)
df = data.frame(var1, var2, var3)
View(df)
var3 = runif(n = 20, min = 1, max = 10)
df = data.frame(var1, var2, var3)
col = rep("blue", 5)
col = c(rep("blue", 5), rep("red", 10), rep("yellow", 5)
)
df = cbind(df, col)
View(df)
df = df[,-2]
plot_ly(df, mode = "markers", size = var3, color = col)
plot_ly(df, mode = "markers", size = var3, color = as.factor(col))
df = cbind(df, var2)
plot_ly(data = df, x = var1, y = var2, mode = "markers", size = var3, color = color)
plot_ly(data = df, x = var1, y = var2, mode = "markers", size = var3, color = col)
col = c(rep("Golf", 5), rep("Soccer", 10), rep("Basketball", 5)
)
var3 = runif(n = 20, min = 1, max = 10000)
df = data.frame(var1, var2, var3, col)
plot_ly(data = df, x = var1, y = var2, mode = "markers", size = var3, color = col)
data("iris")
a = data("iris")
iris
head(iris)
rm(list = setdiff(ls(), iris))
data("iris")
ncol(iris)
plot_ly(data = iris, x = Sepal.Length, y = Petal.Length, z = Petal.Width, type = "Scatter3D")
plot_ly(data = iris, x = Sepal.Width, y = Petal.Length, z = Petal.Width, type = "Scatter3D")
plot_ly(x = Sepal.Width, y = Petal.Length, z = Petal.Width, type = "Scatter3D", data = iris)
plot_ly(x = iris$Sepal.Length, y = iris$Petal.Length, z = iris$Petal.Width, type = "Scatter3D")
plot_ly(x = iris$Sepal.Length, y = iris$Petal.Length, z = iris$Petal.Width, type = "scatter3d")
plot_ly(x = iris$Sepal.Length, y = iris$Petal.Length, z = iris$Petal.Width, type = "scatter3d", color = iris$Species)
knitr::opts_chunk$set(echo = TRUE)
plot_ly(data = iris, x = Sepal.Length, y = Petal.Length, z = Petal.Width, color = Species, type = "scatter3d")
plot_ly(x = iris$Sepal.Length, y = iris$Petal.Length, z = iris$Petal.Width, color = iris$Species, type = "scatter3d")
knitr::opts_chunk$set(echo = FALSE)
plot_ly(x = iris$Sepal.Length, y = iris$Petal.Length, z = iris$Petal.Width, color = iris$Species, type = "scatter3d", xlab(label = "Sepal.Length"), ylab(label = "Petal.Length"))
class(iris)
plot_ly(data = iris, x = Sepal.Length, y = Petal.Length, z = Petal.Width, type = "Scatter3D", xlab(label = "Sepal.Length"), ylab(label = "Petal.Length"))
plot_ly(x = iris$Sepal.Length, y = iris$Petal.Length, z = iris$Petal.Width, color = iris$Species, type = "scatter3d", xlab(label = "Sepal.Length"), ylab(label = "Petal.Length"))
plot_ly(x = iris$Sepal.Length, y = iris$Petal.Length, z = iris$Petal.Width, type = "Scatter3D")
plot_ly(x = iris$Sepal.Length, y = iris$Petal.Length, z = iris$Petal.Width, type = "scatter3d")
plot_ly(x = iris$Sepal.Length, y = iris$Petal.Length, z = iris$Petal.Width, type = "scatter3d", color = iris$Species)
library(plotly)
data("iris")
head(iris)
plot_ly(x = iris$Sepal.Length, y = iris$Petal.Length, z = iris$Petal.Width, type = "scatter3d", color = iris$Species)
knit_with_parameters('C:/Users/drega/Desktop/Proj3.Rmd')
library(slidify)
author("Andrea")
install.packages('rsconnect')
data(iris)
head(iris)
rsconnect::setAccountInfo(name='andreag5',
token='A9AB5F484050C5EEB4D42C5F55043054',
secret='3lWG4eWULPWc4QS/5F2ShDNG30Z/7GShsa9CsUgz')
library(rsconnect)
deployApp("C:\\Users/drega/Desktop/myApp/")
deployApp("C:\\Users/drega/Desktop/myApp/")
deployApp("C:\\Users/drega/Desktop/myApp")
getwd()
setwd("C:\\Users/drega/Desktop/")
slidify("index.Rmd")
slidify(".\myApp\index.Rmd")
slidify("./myApp/index.Rmd")
publish(user = AndreaG5, repo = Data Product Development)
publish(user = "AndreaG5", repo = "Dev_Data_Product")
publish(user = "AndreaG5", repo = "Dev_Data_Product", mode = "selfcontained")
publish(user = "AndreaG5", repo = "Dev_Data_Product")
publish(user = "AndreaG5", repo = "Slidify")
mode("selfcontained")
slidify("index.Rmd")
getwd()
slidify("./myApp7index.Rmd")
slidify("./myApp/index.Rmd")
publish(user = "AndreaG5", repo = "Slidify")
publish_github(user = "AndreaG5", repo = "Slidify")
setwd("C://Users/drega/Desktop/myApp/")
slidify("index.Rmd")
publish_github(user = "AndreaG5", repo = "Slidify")
slidify("index.Rmd")
publish_github(user = "AndreaG5", repo = "Slidify")
git config--global user.email "dre.gaudio@gmail.com"
gitconfig
slidify("index.Rmd")
publish_github(user = "AndreaG5", repo = "Slidify")
library(slidify)
setwd("C://Users/drega/Desktop/myApp/")
slidify("index.Rmd")
publish_github(username = "AndreaG5", repo = "Slidify")
publish("AndreaG5", "Slidify")
library(git2r)
git2r::config(user.name = "AndreaG5", user.email = "dre.gaudio@gmail.com")
publish("AndreaG5", "Slidify")
slidify("index.Rmd")
getwd()
setwd("C:/Users/drega/Desktop/myApp/")
slidify("index.Rmd")
publish("AndreaG5", "Slidify")
setwd("C:/Users/drega/Desktop/myApp")
slidify("index.Rmd")
publish("AndreaG5", "Slidify")
git2r::config(user.name = "AndreaG5", user.email = "dre.gaudio@gmail.com")
library(slidify)
getwd()
slidify("index.Rmd")
publish_github(username = "AndreaG5", repo = "Slidify")
